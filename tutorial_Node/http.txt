1). new Agent({options}) - отвечает за управление сохранением соединения и повторным использованием 
                            для HTTP-клиентов. 
    keepAlive < boolean > : значение по умолчанию равно false. Он по-прежнему сохраняет сокеты независимо 
                        от того, есть ли невыполненные запросы или нет, поэтому его можно использовать 
                        для будущих запросов без повторного установления соединения ( TCP ). 
                        Соединение заголовка проверки активности отправляется при использовании агента, 
                        а соединение « закрыть» используется для закрытия соединения.
    keepAliveMsecs < число > : значение по умолчанию установлено как false. Он обозначает начальную
                         задержку для пакетов TCP Keep-Alive, и если параметр keepAlive имеет значение 
                         false или не определено, игнорируется.
    maxSockets < число > : значение по умолчанию — бесконечность. Он допускает максимальное количество
                         сокетов на хост, и до достижения максимума каждый запрос использует новый сокет.
    maxTotalSockets <число> : значение по умолчанию — бесконечность. Он разрешает максимальное количество 
                            сокетов для всех хостов в целом, и до достижения максимума каждый запрос 
                            использует новый сокет.
    maxFreeSockets < число > : значение по умолчанию — 256. Чтобы оставить открытым в свободном состоянии, 
                        используется максимальное количество сокетов, и это имеет значение, только 
                        если для параметра keepAlive установлено значение true .
    scheduling < string > : Планирование по умолчанию — FIFO. Это стратегия выбора следующего свободного 
                        сокета для планирования и использования. Он бывает двух типов: « FIFO » или 
                        « LIFO ». « LIFO » ( Last In First Out ) выбирает сокет, который использовался 
                        последним, а «FIFO» ( First In First Out ) выбирает сокет, который использовался 
                        последним.
    timeout < число > : подсчитывает время ожидания сокета в миллисекундах и устанавливает время ожидания 
                        при создании сокета.

2). agent.createConnection(options [, callback]) - используется для создания сокета или потока, который в 
                            дальнейшем используется для HTTP запросов.

3). agent.maxSockets - определяет, сколько одновременных сокетов агент может открыть для каждого источника.

4). agent.maxFreeSockets - устанавливает максимальное колличество сокетов, которые будут оставаться открытыми в 
                        свободном состоянии.

5). ClientRequest.abort() - используется для прерывания клиентского запроса.

6). const request.connection - используется для получения ссылки на базовый сокет клиентского запроса.

7). const request.protocol - для получения объекта протокола клиентского запроса.

8). request.aborted - используется для того, был ли клиентский запрос прерван или нет.

9). request.path - для получении пути запроса для конкретного клиентского запроса.

10). const request.setNoDelay([noDelay]) - используется для остановки soket, например отсрочка чрезменых
                            запросов, когда колличество запросов ограничено, нежелательна.

11). const request.setSocketKeepAlive([enable][, initialDelay]) - используется для включения/отключения
                            поддержки активности сокета TCP/IP.

12). const request.removeHeader(name) - используется для удаления заголовка.

13). const request.reusedSocket - используется для того, отправляется ли запрос через повторно 
                                используемый сокет.

14). const request.setHeader(name, value) - для установки объекта установки.

15). request.setTimeout(timeout[, callback]) - используется для установки времени ожидания запроса клиента.

16). request.socket - используется для получении Proxy-объекта, который действует как net.Socket.

17). server.setTimeout([msecs][, callback]) - исползуется для установки значения времени ожидания
                        для сокета.

18). server.timeout - используется для получения значения тайм-аута, по умолчанию в миллисекундах.
                        В Node.js тайм-аут сервера по умолчанию составляет 0 миллисекунд для последней 
                        версии и 2 минуты, т.е. (120000 миллисекунд) для более старой версии.

19). const server.close([callback]) - используется, чтобы запретить сервиру принимать новые соединения.

20). server.headersTimeout - используется для получении времени, в течении которого синтаксический
                        анализатор будет ожидать получении полных заголовков HTTP.

21). const server.maxHeadersCount - используется для получения максимального колличества входящих 
                        заголовков.

22). const server.listen(options [, callback]) - используется для запуска сервера от приёма новых подключений.

23).  server.listening - используется для проверки того, прослушивает ли сервер соединение или нет.

24). server.keepAliveTimeout - используется для получения колличество миллисекунд буздействия, 
                        которое требуется для ожидания дополнительных входящих данных.

25). response.writebleFinished - используется для проверки того, все ли данные были сброшены или нет.

26). response.writebleEnded - используется для того, был ли вызван response.end() или нет.

27). const response.statusCode - управляет кодом состояния, который будет отправлен клиенту при сбросе 
                            заголовков.

28). const response.headersSent - используется для того, был ли отправлен заголовок или нет.

29). const response.setTimeout(msecs [, callback]) - используется для установки значения тайм-аута
                                сокета в мсек.

30). response.socket - используется для получения ссылки на базовый объект сокета.

31). response.statusMessage - используется для управления сообщением о состоянии, которое будет 
                            отправлено клиенту при сбросе заголовков.

32). response.writeProcessing() - используется для отправки клиенту сообщения HTTP/1.1 102.

33). response.sentdDate - используется для того, были ли отправлены заголовки даты или нет.

34). response.getHeader(name) - используется для получения заголовка ответа с определенным именим.

35). response.end(data, EncodingType, callback) - используется для отправки на сервер сигнала о том, что
                                все заголовки отправлены.

36). request.url - используется для получении строки URL-адреса запроса, а также для проверки 
                    конкретного URL-адреса.

37). response.connection - используется для получения ответного сокета этого HTTP-соединения.

38). request.trailers or response.trailers - используеться для получения объекта трейлеров
                        запросо/ответа.

39). request.statusMessage - для получении сообщения о статусе ответа HTTP.

40). request.method - используется для получении типа метода запроса в виде строки.

41). request.rawHeaders - используется для получения необработанных заголовков запроса/ответа в том
                        виде, в котором они были получены.

42). const message.statusCode - используется для получения 3-х значного кода состояния ответа HTTP.

43). const message.raTrailers - используется для получения необработанных ключей и значений трейлера
                                запроса/ответа точно в том виде, в каком они были получены.

44). const messge.aborted - используется для проверки того, был ли запрос прерван или нет.

45). const message.headers - используется для получения всех объектов заголовков запроса/ответа.

46). request.httpVersion - используется для получении HTTP-версии, отправленной клиентом. Наиболее
                            часто используемая ветсия - HTTP/1.1

47). const message.complete - используется для проверки того, было ли получено и успешно 
                            проанализаровано полное HTTP-сообщение.

48). 
