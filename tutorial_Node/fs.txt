1). fs.appendFileSync(path, data, options) - для синхронного добавления заданных данных в файл.
options - 1). кодировка
          2). режим
          3). флаг

2). fs.fchownSync(fd, uid, gid) - для синхронного изменения владельца и группы 
                              данного файлового дескриптора.
fd - файловый дескриптор файла у которого необходимо изменить владельца и группу.
uid - дескриптор пользователя, который соответствует устрнавливаемому владельцу.
gid - идентификатор группы, устанавливаемой группе.

3). fs.chownSync(path, uid, gid) - для синхронного изменения владельца
                               и группы данного пути.

4). fs.accessSync(path, mode) - для синхронной проверки прав доступа к данному файлу или каталогу,
                            проверяемые разрешения можно указывать в качестве параметра.
mode - 1). fs.constants.F_OK
       2). fs.constants.R_OK
       3). fs.constants.W_OK
       4). fs.constants.X_OK

5). fs.access(path, mode, callback) - для проверки прав доступа к данному файлу или каталогу.

6). fs.watchFile(fileName [,options], listener) - для постоянного наблюдения за изменениями в данном файле
fileName -имя файла для просмотра
options - 1). bigint
          2). persistent - это логическое значение, которое используется для указания, 
              должен ли процесс продолжаться, пока файл.
          3). interval
listener - 1). current
           2). previous

8). fsPromises.mkdtemp(prefix, options) - встроенный метод, который создаёт уникальный временный каталог и 
                                      разрешает промис с созданным путем к каталогу.
prefix - путь к файлу.
options - кодировка.

9). fsPromises.chmode(path, mode) - для изменения разрешений данного пути.
path - файл, разрешение, которого надо изменить.

10). fs.unwatchFile(fileName [, listener]) - прекращает наблюдение за изменениями в данном файле.

11). fsPromises.open(fileName, flags, mode) - для асинхронного открытия файла, возвращающего промис,
                                          который при разрешении даёт объект FileHandle.

12). fsPromises.mkdir(path, options) - для асинхронного создания каталога, а затем 
                                  разрешает Promise либо без аргументов, либо с 
                                  первым созданным путем к катологу, если рекурсивный имеет
                                  значение true.

13). fsPromises.readdir(path, options) - для взаимодействия с жестким диском компьютера
Метод readdir() используется для чтения имен файлов и папок. 
Метод fs.promise.readdir() возвращает выполненное или отклоненное обещание
 и, следовательно, позволяет избежать проблем с вложением обратных вызовов
  или адом обратных вызовов, которые могут возникнуть в методе fs.readdir()

15). fsPromises.appendFile(path, data, options) - для асинхронного добавления заданных данных в файл

16). fsPromises.lstat(path, options) - предназначен для взаимодействии с жестким диском компьютера,
                                       представляет некоторую информацию относящуюся к файлам и папкам.


17). fsPromises.stat(path, options) - используется для возврата информации о заданном файле или каталоге.

18). fsPromises.realPath(path, options) - определяет фактическое местополодения путиу, используя ту же
                                          самую сетантику, что и функция fs.realPath.native().

20). fs.read(fs, buffer, offset, length, position, callback) - чтение и запись файла.
        Объяснение: Метод fs.open() открывает файл и возвращает дескриптор файла. 
        Файловый дескриптор — это число или индекс, который сохраняется ядром
         в таблице файловых дескрипторов и используется для уникальной идентификации
          открытого файла в операционной системе компьютера. Метод fs.read() читает файл,
           используя дескриптор файла, и сохраняет его в буфере. Содержимое буфера выводится на печать. 
           Метод fs.close() используется для закрытия файла.

21). fsPromises.chown(path, uid, gid) - используется для изменения владельца файла и затем 
                                       разрешает проми без аргумента с случае успеха.

22). fsPromises.createWriteStream(path, options) - создаёт поток для записи данных в файл.

23). fs.futimes(fd, atime, mtime, callback) - используется для асинхронного изменения временных
                                            меток модификации и доступа данного файлового
                                            дескриптора.

24). fsPromises.truncate(path, len) - для изменения внетреннего содержимого файла на длинну байтов.

25). fsPromises.symlink(target, path, type) - используется для создания символической ссылки на указанный
                                              путь, а затем разрешает промис без аргументов в случае успуха.

26). fsPromises.lchmod(path, mod) - используется для изменеия разрешения данного пути. Этот метод 
                                   реализован только на macOS.
                            
27). fsPromses.lchown(path, uid, gid) - используется для изменения владельца файла, а затем разрешает
                                      промис без аргумента в случае успеха.Этот метод реализован
                                      только в macOS.

28). fsPromises.opendir(path [, options]) - для асинхронного открытия каталога в файловой системе.
options - 1). encoding
          2). bufferSize

29). fsPromises.utimes(path, atime, mtime) - для асинхронного изменения временных меток 
                                            модификации и доступа к файлу.

30). fsPromises.copyFile(src, dest, flags) - для асинхронного копирования файла из исходного пути в целевой.
flags - 1). fs.constants.COPYFILE_EXCL
        2). fs.constants.COPYFILE_FICLONE
        3). fs.constants.COPYFILE_FICLONE_FORCE

31). fsPromises.rename(oldPath, newPath) - для асинхронного переименования файла по указанному старому
                                           пути в заданный новый путь.

32). fsPromises.appendFile(path, data, options) - для добавления новых файлов в существующий файл,
                                           или файл не существует, то сначала создается файл, а затем 
                                           к нему добовляются данные.

33). fsPromises.rmdir(path, options) - используется для удаления каталога по указанному пути.
                                      Его также можно использовать рекурсивно для удаления вложенных 
                                      каталогов.

34). fsPromises.writeFile(file, data, options) - используется для асинхронной записи указанных данных
                                           в файл. Файл будет заменен, если он существует.

35). fsPromises.readFile(path, options) - используется для чтения файла. Этот метол считывает весь файл весь
                                          в буфер.

36). fsPromises.access(path, mode) - для проверки прав доступа к данному файлу или каталогу, указанному пути.
mode - может иметь значения fs.constants.F_OK, fs.constants.R_OK, 
       fs.constants.W_OK и fs.constants.X_OK . Это необязательный параметр. 
       Значение по умолчанию — fs.constants.F_OK .

37). stats.ino - это встроенный интерфейс прикладного программирования класса fs.Stat, который используется 
              для полусения номера "Inod" файла, указанной файловой системы.

38). stats.birthtimeNs - это встроенный интерфейс прикладного программирования класса fs.Stats, который 
                        используется для получения метки времени при создании файла, начиная с эпохи 
                        POSIX, выраженной в миллисекундах.


39). stats.atimeNs - для получении метки времени, когда к файлу обращались в последний раз, выраженной в наносекундах.

41). stats.mtimeNs - для получения метки времени последнего изменения файла, измеряемая в наносекундах.

42). stats.isFIFO() - используется для проверки того, описывает ли объект fs.Stat конвейр "первый
                       первый обслужен" (FIFO) или нет.

43). stats.isSymbolicLink() - для проверки того, описывает ли объект fs.Stat символическую ссылку или нет.

44). stats.isSocket() - для проверки того, описывает ли объект fs.Stat сокет или нет.

45). stats.dev - для получении цифрового идентификатора устройства, на котором находится файл.

46). stats.mtime - для получении метки времени последнего изменения файла.

47). filehandle.readFile(options) - Этот метод предназначен для асинхронного чтения содержимого файла.
                                    Этот метод считывает весь файл в буфер. Он асинхронно читает весь
                                   содержимое файла.

48). stats.ctimeNs - для получении метки времени, когда состояние файла было изменено в последний раз, 
                    выраженное в наносекундах.

49). stats.atime - для получения времени и даты последнего обращения к файлу.

50). stats.birthtime - используется, чтобы узнать, когда файл был создан.

51). stats.ctime - для получения метки времени последнего изменения состояния файла.

52). stats.ctimeMs - для получени метки времени последнего изменения файла, выраженной в миллисекундах.

53). stats.mtimeMs - для получении метки времени, когда файл был изменен в последний раз,
                     начиная с эпохи POSIX, выраженной в миллисекундах.

54). stats.blocks - используется для получения блоков, выделенных для файла.

55). stats.isCharacterDevice() - используется, является ли объект fs.Stat символьным устройством или нет.

56). stats.atimeMs - для получении метки времени, когда к файлу обращались в последний раз, выраженная
                     в миллисекундах.

57). stats.birthtimeMs - для получени метки времени с момента создания файла, выраженных в миллисекундах.

58). filehandle.stat(options) - определен в модуле файловой системы Node.js. Модуль файловой системы
                             в основном предназначен для взаимодействия с жестким диском компьютеров 
                             пользователя. Метод filehandle.stat() предоставляет некоторую 
                             информацию, относящуюся к файлам и папкам, используя методы, определенные 
                             для объектов статистики (объект, возвращаемый методом stat). Метод 
                             возвращает разрешенное или отклоненное обещание.

59). stats.blksize - для получения размера блока для операции ввода-вывода в файловой 
                     системе в байтах.

60). stats.size - для получений размера файла в байтах.

61). stats.nlink - для получения колличество ссылок для файла.

62). stas.mode - для получения типа файла и режима в виде битового поля.

63). stats.isFile() - для проверки того описывает ли объект fs.Stat файл или нет.

64). stats.gid - для получения числового идентификатора группы, к которой принадлежит файл.

65). stats.uid - для получения числового идентификатора пользователя, которому принадлежит файл.

66). stats.rdev - для получения числового идентификатора устройства, на котором хранится файл,
                  которым считается "специальным".

67). const filehandle.utimes(atime, mtime) - для изменения отметки времени этой файловой системы.

68). const filehandle.trancate(len) - для усечения конкретного файлового объекта и будет сохранено только 
                                   то количество байтов, которое передаётся, как целое число в truncate()
                                   метод.

69). const dirent.isFIFO() - для проветки того, описывает ли конктетный dirent первый входящий-первый
                            исходящий канал или нет.

70). cosnt filehandle.fd() - для предоставления числового файлового дескриатора этого объекта 
                            дескриптора файла.

71). const dirent.isSocket() - для проверки того, описывает ли конкретный dirent сокет или нет.

72). const dirent.isFile() - используется для того, описывает ли конкретный каталог файл или нет.

73). const filehandle.write(buffer [,offset [, length [, position]]]) -  используется для записи данных
                            из буфера в этот конкретный файл.

74). const dir.close() - используется для асинхронного закрытия дескриптора базового ресурса каталога.

75). const dir.isCharacterDevice() - используется для проверки того, описывает ли конкретный dirent 
                            символьное устройство или нет.

76). fs.dir.read(callback) - используется для асинхронного чтения каждого следующего каталога (директора).

77). const dirent.isBlockDevice() - используется для проверки того, описывает ли конкретный dirent 
                                   блочное устройство или нет.

78). filehandle.close() - используется для асинхронного закрытия данного дескриатора файла, тем самым 
                            очищая связанный с ним файл. Это позволит повторно использовать файловый 
                            дескриптор для других файлов.

80). filehandle.read(buffer, offset, length, position) - читает файл, используя дескриптор. Для чтения файла
                                   без дескриптора файла можно использовать метод readFile() пакета 
                                   дескриптора файла.

81). stats.isDirectory() - для проверки того, описывает ли объект fs.Stats каталог файловой системы или нет.

82). filehandle.writeFile(data, options) - модуль файловой системы в основном предназначен для взаимодействия
                                   с жестким диском коипьютера пользователя. Модуль fs.writeFile()
                                   асинхронно записывает данные в файл, заменяя файл, если он уже 
                                   существует.

83). const dir.path - используется для получения пути к каталогу.

84). const filehandle.datasync() - для синхронизации данных файла.

85). const filehandle.chmod(mode) - для изменения разрешения конкретного файла

86). stats.isBlockDevice() - для проверки того, является ли объект  fs.Stat() блочным устройством или нет.

87). cosnt filehandle.chmown(uid, gid) - для изменения владельца конкретного файла.

88). const filehandle.sync() - для синхронизации внутреннего состояния этого файла с устройством хранения.

89). filehandle.truncate(len) - для изменения внетреннего содержимого файла на длинну байтов.

90). const dirent.name - для предоставлении имени конкретного файла.

91). filehandle.appendFile(data, options) - для асинхронного добавления новых данных в существующий файл
                            или если файл не существует, то сначало создаётся файл, а затем к нему 
                            добавляются данные.
       data - строка, которая будет добавлена в целевой файл.
       options - указывает метод кодирования.

92). const dirent.isDirectory() - используется для проверки того, описывает ли конкретный каталог или нет.

93). const dirent.isSymbolicLink() - используется для проверки того, описывает ли конкретный dirent
                            символьную ссылку или нет.

94). const dir.readSync() - используется для чтения каждого следующего каталога.

95). const dir.closeSync() - для синхронного закрытия дескриптора базового ресурса каталога.

95). fs.promises.link(existing-path, new_path) - используется для создания нового имени файла.

95). fs.watch(filename [, options][, listener]) - используется для отслеживания изменения в файле.
       listener [eventType, filename] - функция.
       options - кодировка.

96). fs.readlink(path [, options], callback) - для асинхронного возврата символической ссылки, т.е. пути
                     с которым она связана.

97). fs.fdatasync(fd, callback) - Метод fs.fdatasync() (добавлен в версии 0.1.96) представляет собой 
                     встроенный интерфейс прикладного программирования модуля fs , 
                     аналогичный fs.fsync(), он снижает дисковую активность для приложений, 
                     которым не требуется синхронизация всех метаданных. с диском. Метаданные необходимы 
                     для правильной обработки последующего извлечения данных, поскольку они не удаляют 
                     измененные метаданные. 

98). fs.fsync(fd, callback) -  метод является асинхронной формой, он синхронизирует файл с файлом,
                     хранящимся на компьютере.

99). fs.rmSync(path, options) - для синхронного удаления файла по заданному пути.

100). fs.rm(path, options, callback) - используется для удаления файла по указанному пути. Его также
                                   можно использовать рекурсивно для удаления каталогов.

101). fs.writeSync(fd, string, position, encoding)
      fs.writeSync(fd, buffer, offset, length, position) - используется для записи текста, а также двоичных 
                                                        данных в файле.

